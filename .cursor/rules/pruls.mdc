---
alwaysApply: true
---

Никогда не создавать файлы вне заданной структуры.

Не генерировать примеры/демо-код. Только боевой функционал.

Для каждой новой сущности:

SQL-миграция в internal/migrate.

Repo → Service → Handler.

DTO + валидатор.

Unit-тесты (с моком БД).

Swagger-аннотация.

Frontend:

Создавать features/{module}.

Компоненты → только строго по задаче.

Формы через React Hook Form + Zod.

API-клиент в shared/api.

Ответ Cursor на задачу должен содержать:

Перечень файлов, которые изменены/созданы.

Полный код каждого файла.

Краткое пояснение.

Команды для проверки (make dev, make test).

Никогда не фантазировать, опиратся только на фактичпескую реализацию

Перед внесением кода , будь уверен что не сломаешь рабочие части кода



Никогда не создавать файлы вне заданной структуры.

Не генерировать примеры/демо-код. Только боевой функционал.

Для каждой новой сущности:

SQL-миграция в internal/migrate.

Repo → Service → Handler.

DTO + валидатор.

Unit-тесты (с моком БД).

Swagger-аннотация.

Frontend:

Создавать features/{module}.

Компоненты → только строго по задаче.

Формы через React Hook Form + Zod.

API-клиент в shared/api.

Ответ Cursor на задачу должен содержать:

Перечень файлов, которые изменены/созданы.

Полный код каждого файла.

Краткое пояснение.

Команды для проверки (make dev, make test).

Никогда не фантазировать, опиратся только на фактичпескую реализацию

Перед внесением кода , будь уверен что не сломаешь рабочие части кода

Перед выдачей результата. Всегда проверяй что бакенд и фронтенд согласованны друг с другом например:
На фронтенде ты добавил функции просомтра и скачивания документа, в таком случае API эндпоинты для скачивания и предварительного просмотра файлов должны быть реализованны  на бэкенде.

не пиши в чат подробности о изменениях в файлах. Эконось токены

