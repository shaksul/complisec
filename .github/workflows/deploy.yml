name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and push images
        run: |
          VERSION=${{ steps.version.outputs.version }}
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
          docker tag complisec-backend:latest ${{ secrets.DOCKER_USERNAME }}/complisec-backend:$VERSION
          docker tag complisec-frontend:latest ${{ secrets.DOCKER_USERNAME }}/complisec-frontend:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/complisec-backend:$VERSION
          docker push ${{ secrets.DOCKER_USERNAME }}/complisec-frontend:$VERSION

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.0.0
        if: secrets.DEPLOY_HOST != ''
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            cd /opt/complisec
            
            # Backup database
            docker-compose exec -T postgres pg_dump -U complisec complisec > backup_$(date +%Y%m%d_%H%M%S).sql
            
            # Pull latest images
            docker-compose pull
            
            # Stop old containers
            docker-compose down
            
            # Start new containers
            docker-compose up -d
            
            # Wait for services
            sleep 10
            
            # Health check
            curl -f http://localhost:3001/health || exit 1
            curl -f http://localhost:3000 || exit 1
            
            # Cleanup old images
            docker image prune -f

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment || 'production' }}
            Version: ${{ steps.version.outputs.version }}
            Result: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: false
          prerelease: false

