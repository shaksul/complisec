name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: complisec
          POSTGRES_PASSWORD: complisec_pass
          POSTGRES_DB: complisec
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
          cache-dependency-path: apps/backend/go.sum

      - name: Install dependencies
        working-directory: apps/backend
        run: go mod download

      - name: Run Go tests
        working-directory: apps/backend
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: complisec
          DB_PASSWORD: complisec_pass
          DB_NAME: complisec
          DB_SSLMODE: disable
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: apps/backend/coverage.txt
          flags: backend
          fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install dependencies
        working-directory: apps/frontend
        run: npm ci

      - name: Run linter
        working-directory: apps/frontend
        run: npm run lint --if-present

      - name: Build frontend
        working-directory: apps/frontend
        run: npm run build

      - name: Run frontend tests
        working-directory: apps/frontend
        run: npm test --if-present

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: docker-compose build

      - name: Start services
        run: |
          docker-compose up -d
          echo "Waiting for services to be ready..."
          sleep 30

      - name: Check services health
        run: |
          docker-compose ps
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3000 || exit 1

      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          # docker-compose exec -T backend go test -v ./internal/integration/...

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Backend logs ==="
          docker-compose logs backend
          echo "=== Frontend logs ==="
          docker-compose logs frontend
          echo "=== Postgres logs ==="
          docker-compose logs postgres

      - name: Stop services
        if: always()
        run: docker-compose down -v

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: apps/backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/complisec-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/complisec-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/complisec-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/complisec-backend:buildcache,mode=max

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: apps/frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/complisec-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/complisec-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/complisec-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/complisec-frontend:buildcache,mode=max

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'apps/backend'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'apps/frontend'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: '.'

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        if: env.SONAR_TOKEN != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=complisec
            -Dsonar.organization=your-org

