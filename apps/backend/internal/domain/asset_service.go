package domain

import (
	"context"
	"errors"
	"log"
	"time"

	"risknexus/backend/internal/dto"
	"risknexus/backend/internal/repo"

	"github.com/google/uuid"
)

type AssetService struct {
	assetRepo *repo.AssetRepo
	userRepo  *repo.UserRepo
}

func NewAssetService(assetRepo *repo.AssetRepo, userRepo *repo.UserRepo) *AssetService {
	return &AssetService{
		assetRepo: assetRepo,
		userRepo:  userRepo,
	}
}

func (s *AssetService) CreateAsset(ctx context.Context, tenantID string, req dto.CreateAssetRequest, createdBy string) (*repo.Asset, error) {
	log.Printf("DEBUG: asset_service.CreateAsset tenant=%s name=%s", tenantID, req.Name)

	// Validate owner exists if provided
	if req.OwnerID != "" {
		owner, err := s.userRepo.GetByID(ctx, req.OwnerID)
		if err != nil {
			log.Printf("ERROR: asset_service.CreateAsset GetByID owner: %v", err)
			return nil, err
		}
		if owner == nil {
			log.Printf("WARN: asset_service.CreateAsset owner not found id=%s", req.OwnerID)
			return nil, errors.New("owner not found")
		}
	}

	// Set default status if not provided
	status := req.Status
	if status == "" {
		status = "active"
	}

	// Create asset
	asset := repo.Asset{
		ID:              uuid.New().String(),
		TenantID:        tenantID,
		InventoryNumber: "", // Will be generated by repo
		Name:            req.Name,
		Type:            req.Type,
		Class:           req.Class,
		OwnerID:         &req.OwnerID,
		Location:        &req.Location,
		Criticality:     req.Criticality,
		Confidentiality: req.Confidentiality,
		Integrity:       req.Integrity,
		Availability:    req.Availability,
		Status:          status,
		CreatedAt:       time.Now(),
		UpdatedAt:       time.Now(),
	}

	// Handle empty owner ID
	if req.OwnerID == "" {
		asset.OwnerID = nil
	}

	err := s.assetRepo.Create(ctx, asset)
	if err != nil {
		log.Printf("ERROR: asset_service.CreateAsset repo.Create: %v", err)
		return nil, err
	}

	// Log creation in history
	err = s.assetRepo.AddHistory(ctx, asset.ID, "created", "", "Asset created", createdBy)
	if err != nil {
		log.Printf("WARN: asset_service.CreateAsset AddHistory: %v", err)
	}

	log.Printf("DEBUG: asset_service.CreateAsset success id=%s", asset.ID)
	return &asset, nil
}

func (s *AssetService) GetAsset(ctx context.Context, id string) (*repo.Asset, error) {
	return s.assetRepo.GetByID(ctx, id)
}

func (s *AssetService) GetAssetWithDetails(ctx context.Context, id string) (*repo.AssetWithDetails, error) {
	return s.assetRepo.GetWithDetails(ctx, id)
}

func (s *AssetService) ListAssets(ctx context.Context, tenantID string, filters map[string]interface{}) ([]repo.Asset, error) {
	return s.assetRepo.List(ctx, tenantID, filters)
}

func (s *AssetService) ListAssetsPaginated(ctx context.Context, tenantID string, page, pageSize int, filters map[string]interface{}) ([]repo.Asset, int64, error) {
	return s.assetRepo.ListPaginated(ctx, tenantID, page, pageSize, filters)
}

func (s *AssetService) UpdateAsset(ctx context.Context, id string, req dto.UpdateAssetRequest, updatedBy string) error {
	log.Printf("DEBUG: asset_service.UpdateAsset id=%s", id)

	// Get existing asset
	asset, err := s.assetRepo.GetByID(ctx, id)
	if err != nil {
		log.Printf("ERROR: asset_service.UpdateAsset GetByID: %v", err)
		return err
	}
	if asset == nil {
		log.Printf("WARN: asset_service.UpdateAsset not found id=%s", id)
		return errors.New("asset not found")
	}

	// Validate owner if provided
	if req.OwnerID != nil && *req.OwnerID != "" {
		owner, err := s.userRepo.GetByID(ctx, *req.OwnerID)
		if err != nil {
			log.Printf("ERROR: asset_service.UpdateAsset GetByID owner: %v", err)
			return err
		}
		if owner == nil {
			log.Printf("WARN: asset_service.UpdateAsset owner not found id=%s", *req.OwnerID)
			return errors.New("owner not found")
		}
	}

	// Track changes for history
	changes := make(map[string]string)

	// Update fields if provided
	if req.Name != nil && *req.Name != asset.Name {
		changes["name"] = *req.Name
		asset.Name = *req.Name
	}
	if req.Type != nil && *req.Type != asset.Type {
		changes["type"] = *req.Type
		asset.Type = *req.Type
	}
	if req.Class != nil && *req.Class != asset.Class {
		changes["class"] = *req.Class
		asset.Class = *req.Class
	}
	if req.OwnerID != nil {
		newOwnerID := ""
		if *req.OwnerID != "" {
			newOwnerID = *req.OwnerID
		}
		oldOwnerID := ""
		if asset.OwnerID != nil {
			oldOwnerID = *asset.OwnerID
		}
		if newOwnerID != oldOwnerID {
			changes["owner_id"] = newOwnerID
			if newOwnerID == "" {
				asset.OwnerID = nil
			} else {
				asset.OwnerID = &newOwnerID
			}
		}
	}
	if req.Location != nil {
		newLocation := *req.Location
		oldLocation := ""
		if asset.Location != nil {
			oldLocation = *asset.Location
		}
		if newLocation != oldLocation {
			changes["location"] = newLocation
			asset.Location = &newLocation
		}
	}
	if req.Criticality != nil && *req.Criticality != asset.Criticality {
		changes["criticality"] = *req.Criticality
		asset.Criticality = *req.Criticality
	}
	if req.Confidentiality != nil && *req.Confidentiality != asset.Confidentiality {
		changes["confidentiality"] = *req.Confidentiality
		asset.Confidentiality = *req.Confidentiality
	}
	if req.Integrity != nil && *req.Integrity != asset.Integrity {
		changes["integrity"] = *req.Integrity
		asset.Integrity = *req.Integrity
	}
	if req.Availability != nil && *req.Availability != asset.Availability {
		changes["availability"] = *req.Availability
		asset.Availability = *req.Availability
	}
	if req.Status != nil && *req.Status != asset.Status {
		changes["status"] = *req.Status
		asset.Status = *req.Status
	}

	// Update asset if there are changes
	if len(changes) > 0 {
		asset.UpdatedAt = time.Now()
		err = s.assetRepo.Update(ctx, *asset)
		if err != nil {
			log.Printf("ERROR: asset_service.UpdateAsset repo.Update: %v", err)
			return err
		}

		// Log changes in history
		for field, newValue := range changes {
			oldValue := ""
			switch field {
			case "name":
				oldValue = asset.Name
			case "type":
				oldValue = asset.Type
			case "class":
				oldValue = asset.Class
			case "owner_id":
				if asset.OwnerID != nil {
					oldValue = *asset.OwnerID
				}
			case "location":
				if asset.Location != nil {
					oldValue = *asset.Location
				}
			case "criticality":
				oldValue = asset.Criticality
			case "confidentiality":
				oldValue = asset.Confidentiality
			case "integrity":
				oldValue = asset.Integrity
			case "availability":
				oldValue = asset.Availability
			case "status":
				oldValue = asset.Status
			}
			err = s.assetRepo.AddHistory(ctx, id, field, oldValue, newValue, updatedBy)
			if err != nil {
				log.Printf("WARN: asset_service.UpdateAsset AddHistory %s: %v", field, err)
			}
		}
	}

	return nil
}

func (s *AssetService) DeleteAsset(ctx context.Context, id string, deletedBy string) error {
	log.Printf("DEBUG: asset_service.DeleteAsset id=%s", id)

	// Check if asset exists
	asset, err := s.assetRepo.GetByID(ctx, id)
	if err != nil {
		log.Printf("ERROR: asset_service.DeleteAsset GetByID: %v", err)
		return err
	}
	if asset == nil {
		log.Printf("WARN: asset_service.DeleteAsset not found id=%s", id)
		return errors.New("asset not found")
	}

	// Soft delete
	err = s.assetRepo.SoftDelete(ctx, id)
	if err != nil {
		log.Printf("ERROR: asset_service.DeleteAsset repo.SoftDelete: %v", err)
		return err
	}

	// Log deletion in history
	err = s.assetRepo.AddHistory(ctx, id, "deleted", "", "Asset deleted", deletedBy)
	if err != nil {
		log.Printf("WARN: asset_service.DeleteAsset AddHistory: %v", err)
	}

	log.Printf("DEBUG: asset_service.DeleteAsset success id=%s", id)
	return nil
}

func (s *AssetService) AddDocument(ctx context.Context, assetID string, req dto.AssetDocumentRequest, createdBy string) error {
	log.Printf("DEBUG: asset_service.AddDocument assetID=%s type=%s", assetID, req.DocumentType)

	// Check if asset exists
	asset, err := s.assetRepo.GetByID(ctx, assetID)
	if err != nil {
		return err
	}
	if asset == nil {
		return errors.New("asset not found")
	}

	// Add document
	err = s.assetRepo.AddDocument(ctx, assetID, req.DocumentType, req.FilePath, createdBy)
	if err != nil {
		log.Printf("ERROR: asset_service.AddDocument repo.AddDocument: %v", err)
		return err
	}

	// Log in history
	err = s.assetRepo.AddHistory(ctx, assetID, "document_added", "", req.DocumentType, createdBy)
	if err != nil {
		log.Printf("WARN: asset_service.AddDocument AddHistory: %v", err)
	}

	return nil
}

func (s *AssetService) GetAssetDocuments(ctx context.Context, assetID string) ([]repo.AssetDocument, error) {
	return s.assetRepo.GetAssetDocuments(ctx, assetID)
}

func (s *AssetService) AddSoftware(ctx context.Context, assetID string, req dto.AssetSoftwareRequest, addedBy string) error {
	log.Printf("DEBUG: asset_service.AddSoftware assetID=%s name=%s", assetID, req.SoftwareName)

	// Check if asset exists
	asset, err := s.assetRepo.GetByID(ctx, assetID)
	if err != nil {
		return err
	}
	if asset == nil {
		return errors.New("asset not found")
	}

	// Add software
	version := ""
	if req.Version != nil {
		version = *req.Version
	}
	err = s.assetRepo.AddSoftware(ctx, assetID, req.SoftwareName, version, req.InstalledAt)
	if err != nil {
		log.Printf("ERROR: asset_service.AddSoftware repo.AddSoftware: %v", err)
		return err
	}

	// Log in history
	err = s.assetRepo.AddHistory(ctx, assetID, "software_added", "", req.SoftwareName, addedBy)
	if err != nil {
		log.Printf("WARN: asset_service.AddSoftware AddHistory: %v", err)
	}

	return nil
}

func (s *AssetService) GetAssetSoftware(ctx context.Context, assetID string) ([]repo.AssetSoftware, error) {
	return s.assetRepo.GetAssetSoftware(ctx, assetID)
}

func (s *AssetService) GetAssetHistory(ctx context.Context, assetID string) ([]repo.AssetHistory, error) {
	return s.assetRepo.GetAssetHistory(ctx, assetID)
}

func (s *AssetService) PerformInventory(ctx context.Context, tenantID string, req dto.AssetInventoryRequest, performedBy string) error {
	log.Printf("DEBUG: asset_service.PerformInventory tenant=%s action=%s", tenantID, req.Action)

	// Validate all assets exist
	for _, assetID := range req.AssetIDs {
		asset, err := s.assetRepo.GetByID(ctx, assetID)
		if err != nil {
			return err
		}
		if asset == nil {
			return errors.New("asset not found: " + assetID)
		}
	}

	// Perform inventory action
	for _, assetID := range req.AssetIDs {
		if req.Action == "update_status" && req.Status != nil {
			// Update status
			updateReq := dto.UpdateAssetRequest{
				Status: req.Status,
			}
			err := s.UpdateAsset(ctx, assetID, updateReq, performedBy)
			if err != nil {
				log.Printf("ERROR: asset_service.PerformInventory UpdateAsset %s: %v", assetID, err)
				return err
			}
		}

		// Log inventory action
		action := "inventory_" + req.Action
		notes := ""
		if req.Notes != nil {
			notes = *req.Notes
		}
		err := s.assetRepo.AddHistory(ctx, assetID, action, "", notes, performedBy)
		if err != nil {
			log.Printf("WARN: asset_service.PerformInventory AddHistory %s: %v", assetID, err)
		}
	}

	log.Printf("DEBUG: asset_service.PerformInventory success")
	return nil
}