package main

import (
	"database/sql"
	"fmt"
	"log"

	_ "github.com/jackc/pgx/v5/stdlib"
)

func main() {
	fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∏")
	fmt.Println("=====================================")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := sql.Open("pgx", "postgres://complisec:complisec123@localhost:5432/complisec?sslmode=disable")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err)
	}
	defer db.Close()

	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞
	fmt.Println("\n1. üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:")
	var clientEncoding string
	err = db.QueryRow("SELECT current_setting('client_encoding')").Scan(&clientEncoding)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è client_encoding:", err)
	}
	fmt.Printf("   client_encoding: %s", clientEncoding)
	if clientEncoding == "UTF8" {
		fmt.Println(" ‚úÖ")
	} else {
		fmt.Println(" ‚ùå")
	}

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("\n2. üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
	var dbEncoding string
	err = db.QueryRow("SELECT pg_encoding_to_char(encoding) FROM pg_database WHERE datname = 'complisec'").Scan(&dbEncoding)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ë–î:", err)
	}
	fmt.Printf("   database encoding: %s", dbEncoding)
	if dbEncoding == "UTF8" {
		fmt.Println(" ‚úÖ")
	} else {
		fmt.Println(" ‚ùå")
	}

	// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ mojibake
	fmt.Println("\n3. üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ mojibake:")
	rows, err := db.Query("SELECT code, description FROM permissions WHERE description IS NOT NULL LIMIT 10")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∞–≤:", err)
	}
	defer rows.Close()

	corruptedCount := 0
	totalCount := 0

	for rows.Next() {
		var code, description string
		if err := rows.Scan(&code, &description); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
			continue
		}

		totalCount++

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ mojibake
		if containsMojibake(description) {
			fmt.Printf("   ‚ùå %s: %q (—Å–æ–¥–µ—Ä–∂–∏—Ç mojibake)\n", code, description)
			corruptedCount++
		} else {
			fmt.Printf("   ‚úÖ %s: %q\n", code, description)
		}
	}

	if corruptedCount == 0 {
		fmt.Printf("\nüéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ %d –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É!\n", totalCount)
	} else {
		fmt.Printf("\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ %d –∏–∑ %d –ø—Ä–∞–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏\n", corruptedCount, totalCount)
	}

	// 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("\n4. üß™ –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ UTF-8 –¥–∞–Ω–Ω—ã—Ö:")
	testDescription := "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ UTF-8: —ë, –π, —â, —ç, ‚Ññ, ¬ß"

	// –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	_, err = db.Exec(
		"INSERT INTO permissions (id, code, module, description) VALUES (gen_random_uuid(), $1, $2, $3)",
		"test.utf8.verification", "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", testDescription,
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
	} else {
		fmt.Printf("   ‚úÖ –í—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞: %q\n", testDescription)
	}

	// –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
	var readDescription string
	err = db.QueryRow("SELECT description FROM permissions WHERE code = 'test.utf8.verification'").Scan(&readDescription)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
	} else {
		if readDescription == testDescription {
			fmt.Printf("   ‚úÖ –ß—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: %q\n", readDescription)
		} else {
			fmt.Printf("   ‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏: %q\n", readDescription)
		}
	}

	// –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	_, err = db.Exec("DELETE FROM permissions WHERE code = 'test.utf8.verification'")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	fmt.Println("\n=====================================")
	fmt.Println("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}

// containsMojibake –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ mojibake
func containsMojibake(text string) bool {
	mojibakePatterns := []string{
		"–†—ü", "–°–Ç", "–†—ï", "–°–É", "–†—ò", "–†—ï", "–°‚Äö", "–°–Ç",
		"–†–Ü", "–†—ï", "–†¬∑", "–†—ò", "–†—ï", "–†¬∂", "–†–Ö", "–†—ï", "–°–É", "–°–É",
		"–†–Ö", "–†¬∞", "–°–É", "–°‚Äö", "–°–Ç", "–†—ï", "–†‚Ññ", "–†—î",
	}

	for _, pattern := range mojibakePatterns {
		if len(pattern) <= len(text) {
			for i := 0; i <= len(text)-len(pattern); i++ {
				if text[i:i+len(pattern)] == pattern {
					return true
				}
			}
		}
	}

	return false
}
