version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: complisec
      POSTGRES_USER: complisec
      POSTGRES_PASSWORD: complisec123
      # Принудительная установка UTF-8 кодировки
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=ru_RU.UTF-8 --lc-ctype=ru_RU.UTF-8"
      LC_ALL: "ru_RU.UTF-8"
      LANG: "ru_RU.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U complisec -d complisec"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://complisec:complisec123@postgres:5432/complisec?sslmode=disable&client_encoding=UTF8
      - JWT_SECRET=your-secret-key-here
      - PORT=8080
      # Принудительная установка UTF-8 для Go приложения
      - LC_ALL=ru_RU.UTF-8
      - LANG=ru_RU.UTF-8
      # RAG Stack Configuration
      - QDRANT_URL=http://qdrant:6333
      - GRAPHRAG_URL=http://graphrag:8000
      - DOC_PROCESSOR_URL=http://doc-processor:8001
      - OLLAMA_URL=http://ollama:11434
      - OPENWEBUI_API=http://openwebui:8080/api
      - EMBEDDING_MODEL=embeddinggemma:2b
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./storage:/root/storage
    networks:
      - default
      - ragnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # === RAG Stack ===
  
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ragnet
    restart: unless-stopped
    # GPU support (раскомментировать при наличии NVIDIA GPU)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

  openwebui:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: openwebui
    ports:
      - "3001:8080"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_AUTH=false
      - ENABLE_EMBEDDING_API=true
    volumes:
      - openwebui_data:/app/backend/data
    depends_on:
      - ollama
    networks:
      - ragnet
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - ragnet
    restart: unless-stopped

  graphrag:
    build:
      context: ./apps/graphrag
      dockerfile: Dockerfile
    container_name: graphrag
    ports:
      - "8000:8000"
    environment:
      - GRAPHRAG_DB_PATH=/data/graphrag.db
      - QDRANT_URL=http://qdrant:6333
      - EMBEDDING_API_URL=http://openwebui:8080/api/v1/embeddings
      - EMBEDDING_MODEL=embeddinggemma:2b
      - CHUNK_SIZE=1000
      - CHUNK_OVERLAP=200
    volumes:
      - graphrag_data:/data
    depends_on:
      - qdrant
      - openwebui
    networks:
      - ragnet
    restart: unless-stopped

  doc-processor:
    build:
      context: ./apps/doc-processor
      dockerfile: Dockerfile
    container_name: doc-processor
    ports:
      - "8001:8001"
    environment:
      - TESSERACT_LANG=rus+eng
      - MAX_FILE_SIZE=52428800
    volumes:
      - ./storage:/storage:ro
    networks:
      - ragnet
    restart: unless-stopped

networks:
  default:
    driver: bridge
  ragnet:
    driver: bridge

volumes:
  postgres_data:
  ollama_data:
  openwebui_data:
  qdrant_storage:
  graphrag_data: